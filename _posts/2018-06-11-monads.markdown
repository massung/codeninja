---
title: "Why Monads?"
date: 2018-06-11
categories: [scala,monads,programming]
tags: [scala,monads]
---
Recently I had the unlucky experience of trying to explain to some friends over Slack (a horrible medium for teaching) what monads are good for. Trying to show how they are not just a "smart man's obfuscation" proved difficult.

I went away for a while and started really putting some thought into how to best explain it. I've gotten so used to using them that I never thought too hard about why. This post is about why, and - hopefully - at the same time help others who have a difficult time grokking them....

<hr />

## Why Are Monads Hard?

That there are [pages and pages][google] of the Internet dedicated to trying to explain monads to (very smart!) programmers is a testament to how difficult they are to learn.

But why? The top Google hit is [Wikipedia][wikipedia], which rightfully goes over history and the formal definition, but isn't what the average programmer needs to start being productive: what's the problem being solved and how do they solve them contrasted against an alternative solution?

There are also gobs of blog posts (like this one), but most of them end up falling into one of a few categories:

* reciting back the monadic [laws][laws] to the reader - not adding anything new to what they've already read in other numerous blog posts;

* attempting to use some analogy with containers that leaves the reader wondering how that is possibly better than just using the data directly or how to they would make use of this in their own code effectively; or

* they dive deep into a pool of functional programming kool-aid, which leaves the author feeling quite proud, but the reader either having stopped somewhere in the middle or just accepting on blind faith that "this is the future" of programming.

## How Is This Post Different?

I plan on walking you - the reader - through an actual problem. Talk about why it is a problem, and then we'll derive a solution together. In the end we'll have re-invented monads and you understand why they are useful, when to use them, and how to use them effectively.

## Premise: Pure vs. Effect

We'll begin with a premise; all code produces values and those values fall into one of two categories: _pure_ or _effect_. In [Scala][scala], consider the following two lines of code:

```scala
@ 3                  // pure
res: Int = 3

@ println("hello")   // effect
Hello
res: Unit = ()
```

The first line of code is _pure_. There was no side-effect that took place to realize its value. The second required an _effect_ to realize its value, making the value and _effect_.

We'll also stipulate that using an _effect_ value to produce a new value implicitly means that the new value created must also be an _effect_. 

Consider an instance of `Option`. Any value derived from it must also - by definition - be an `Option`. Or, any function that calls an asynchronous function must also be considered asynchronous.

## The Problem

Let's start with a simple function...

```scala
def pair[T](x: T) = (x, x)
```

Let's see what happens when we call this function with a _pure_ value:

```scala
@ val x = 3
res2: Int = 3

@ pair(x)
res3: (Int, Int) = (3, 3)
```

This works fine because `pair` is a _pure_ function: it accepts a _pure_ value and returns a _pure_ value. Let's call it with an _effect_ value:

```scala
@ val x = println("Hello")
Hello

@ pair(x)
res4: (Unit, Unit) = ((), ())
```

The problem is that we've stipulated that using a _effect_ value means the returned value must also be an _effect_. But that didn't happen. No matter how many times we use the value of `x`, the _effect_ will never happen again.

## A Naive Solution

Instead of using passing the result of the _effect_, what we need to do is pass a _description_ of it. The most straight-foward way to do this is to wrap it in a function:

```scala
def x = println("Hello")
```

Now, when we use it, the _effect_ happens every time.

```scala
@ pair(x)
Hello
res: (Unit, Unit) = ((), ())
```

Done, right? Well, not quite.

We're actually breaking our own rules. The `pair` function should either be _pure_ or an _effect_; it can't be both. The way we've coded it, it's _pure_. Consider:

```scala
@ val y = pair(x)
Hello
res: (Unit, Unit) = ((), ())

@ y
res: (Unit, Unit) = ((), ())
```

The resulting value returned by `pair` is not an _effect_, even though it should be.

We've now come to the root of our problem: even wrapping our values in functions, we have no formal, type-safe method of being able to distinguish between _pure_ and _effect_ values and _pure_ and _effect_ functions.

## An Effect Type

We need to define a type that can be used represent _effect_ values. With it, we can know when we're passing/returning _effect_ values, and the compiler should keep us honest.

```scala
object io {
  abstract class Effect[A]

  // an effect that needs evaluated
  case class Thunk[A](thunk: () => A) extends Effect[A]

  // helper function to make an effect object
  def IO[A](x: => A) = Thunk(() => x)
}
```

The `Effect` base class can be use to describe different _effect_ values. It never holds the result of an _effect_, but is merely a description of how to evaluate it. 

*Notice how our `Thunk` is still just a function like before, only now it's wrapped in a type.*

Let's create an `Effect`:

```scala
@ val x = io.IO { println("Hello") }
x: io.Thunk[Unit] = Thunk(..)
```

And, if we try and use it in a _pure_ function, we can see that we're just passing the `Effect` and not an evaluated result:

```scala
@ pair(x)
res: (io.Thunk[Unit], io.Thunk[Unit]) = (
  Thunk(..),
  Thunk(..)
)
```

We need a way to use the result of our _effect_ value and get an _effect_ returned. Instead of `(Effect[A], Effect[A])` returned, we'd like to get back `Effect[(A, A)]`.

We'll do this by creating a `bind` method in our base `Effect` class and a new subclass for it:

```scala
object io {
  abstract class Effect[A] {
    def bind[B](f: A => Effect[B]): Effect[B] = Bind(this, f)
  }

  // an effect that needs evaluated
  case class Thunk[A](thunk: () => A) extends Effect[A]

  // mapping an effect through a function
  case class Bind[A, B](a: Effect[A], f: A => Effect[B]) extends Effect[B]

  // helper function to make an effect object
  def IO[A](x: => A) = Thunk(() => x)
}
```

Why does `f` need to return an `Effect`?

Don't forget that by using an effect value, the result is also - by definition - an effect value.

*An astute reader will notice that our `bind` method has the same type signature as Scala's `flatMap` method. In fact, we could rename it `flatMap` and it would work in `for` loops!*

Let's try it out...

```scala
@ io.IO { println("Hello") }.bind {
  x => io.IO { pair(x) }
}
res: io.Effect[(Unit, Unit)] = Bind(Thunk(.., ..))
```

Excellent!

Now, we have the building blocks to make another helper function: one that will "map" a _pure_ function and return an _effect_ function.

```scala
def fmap[A, B](f: A => B): (io.Effect[A] => io.Effect[B]) = {
  e => e.bind { x => io.IO(f(x)) }
}
```

Let's test it:

```scala
@ fmap(pair[Unit])(x)
res: io.Effect[(Unit, Unit)] = Bind(Thunk(.., ..))
```

All that's needed now is a way to evaluate an _effect_:

```scala
def run[A](effect: io.Effect[A]): A = effect match {
  case io.Thunk(f)   => f()
  case io.Bind(a, f) => run(f(run(a)))
}
```

And we can finally play with our creation...

```scala
@ val x = io.IO { println("Hello") }
x: io.Thunk[Unit] = Thunk(..)

@ run(x)
Hello
res: Unit = ()

@ run(x bind { e => io.IO(e, e) })
Hello
res: (Unit, Unit) = ((), ())

@ run(fmap(pair[Unit])(x))
Hello
res: (Unit, Unit) = ((), ())
```

## What Was Accomplished?

That seems like an awful lot of work/abstraction. Did we actually accomplish anything?

We've created a functional, type-safe description of an _effect_, and guaranteed that any use of an _effect_ also returns an _effect_. This prevents us from ever accidentally using a _effect_ from within a _pure_ context.

Let's recap the problem:

* There are two categories of values & functions: pure and effect.
* Effect values can't be evaluated more than once.
* Passing an effect value to a pure function returns a pure value.
* It's impossible to know (at compile time) which category a value or function belongs to.

To fix this we...

* defined a type-safe structure for effect values,
* built a way to pass them to functions, and
* implemented a "runner" that can evaluate effects.

## So, What Is A Monad?

Coming full circle...

A monad is just a formal definition (rooted in [category theory][theory]) of what was coded above! In short, _a monad is used to categorize values and functions in a type-safe manner_. 

To do this, you can think of a monad as an interface exposing two methods (using Haskell naming):

* `return` takes a value and return it wrapped in the monad; and
* `>>=` binds a function in the monad

*In Scala, these functions would typically be a constructor or `apply` and `flatMap`.*

And, composing those two methods, they _must_ follow these three rules:

1. Left identity: `return x >>= f ≡ f x`
2. Right identity: `m >>= return ≡ m`
3. Associativity: `(m >>= f) >>= g ≡ m >>= (\x -> f x >>= g)`

For those unfamiliar with Haskell, the above can seem pretty daunting. But, let's try and rewrite them in English:

1. An effect (`return x`) after binding it to a function (`>>= f`), should be equivelant (`≡`) to `f(x)`.

2. An effect (`m`) when bound to the function that creates an effect (`>>= return`), should return the equivelant effect (`≡ m`).

3. As with addition and multiplication, parethesis shouldn't matter. Assuming `f(x)` returns an effect, then `(m >>= f) >>= g` should produce the same result as `m >>= (\x -> f x >>= g)`.

Our `Effect` class is a Monad as-as. And we can prove it:

```scala
// left identity... f(x) = 1+1 = 2
@ run(io.IO(1).bind(x => io.IO(x+1)))
res: Int = 2

// right identity... x bind io.IO = x
@ run(io.IO(1).bind(x => io.IO(x)))
res: Int = 1

// associativity... note the parenthesis!
@ run(io.IO(1).bind(x => io.IO(x+1)).bind(x => io.IO(x, x)))
res: (Int, Int) = (2, 2)

@ run(io.IO(1).bind(x => io.IO(x+1).bind(x => io.IO(x, x))))
res: (Int, Int) = (2, 2)
```

## Examples of Monads

While our derived use-case for a monad was code that contained side-effects, the use of monads is not exclusive to side-effect code. Again, _monads are used to categorize values and functions in a type-safe manner_! Consider these classes that are also monads:

* Option
* Try
* Either
* Future
* IO ([cats-effect][cats])
* Task ([monix][monix])

These are all examples of a values (and functions) that are categorized such that once a value is in that category, all subsequent uses of it are also part of that category.

Once a value is categorized as Optional, any value derived from it _must also be Optional_. The same goes for Try, Futures, Task, etc.

## fin.

I hope this helps you to understand monads a bit more, what problem(s) they are used to solve, and - more importantly - giving you the knowledge to know when and how to use them effectively!

*Special thanks to [cats-effect][cats] library contributors! I've paraphrased some of their code in the making of this post.*

[google]:    https://www.google.com/search?q=monad
[wikipedia]: https://en.wikipedia.org/wiki/Monad_(functional_programming)
[theory]:    https://en.wikipedia.org/wiki/Monad_(category_theory)
[laws]:      https://wiki.haskell.org/Monad_laws
[scala]:     https://www.scala-lang.org/
[cats]:      https://typelevel.org/cats-effect/
[async]:     https://javascript.info/async-await
[monix]:     https://monix.io/