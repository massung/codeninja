---
title: "Huffman coding in Go"
date: 2017-07-19
categories: [programming,go,huffman]
tags: [programming,go,huffman]
---
For another project I'm working on I needed to [Huffman encode][1] text strings into bit vectors. I saw a few other Huffman libraries on [GoDoc][2], but they didn't really seem to do what I wanted or depended on other libraries when Huffman coding is not that difficult to implement. So, I decided to just crank one out real quick and thought others might find it useful as well.

[http://github.com/massung/go-huffman](http://github.com/massung/go-huffman)

What makes this one unique from the others I've come across are:

* Encoding *and* decoding to/from a `[]uint32` bit vector.
* Create the tree from a `string`, `[]rune`, or `map[rune]float64`.
* TODO: Ability to serialize and deserialize the tree.

Example code:

```go
package main

import "github.com/massung/go-hufffman"

var (
    loremIpsum = "Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum."
)

func main() {
    tree := huffman.NewTree(loremIpsum)

    // encode the source string
    bitVec, size, err := tree.Encode(loremIpsum)
    if err != nil {
        panic(err)
    }

    // decode the bit vector back into a string
    s, err := tree.Decode(bitVec, size)
    if err != nil {
        panic(err)
    }

    // should print "true 445 232"
    println(s == loremIpsum, len(loremIpsum), len(bitVec)*4)
}
```

I still plan on adding support for serializing and deserializing of the tree, which is needed if you want to encoded data intended to be decoded at a later time or on another machine. If you think you could benefit from that soon, let me know and I'll add it sooner.

Cheers!

[1]: https://en.wikipedia.org/wiki/Huffman_coding
[2]: https://godoc.org/?q=huffman